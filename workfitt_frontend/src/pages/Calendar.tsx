import { IonButton, IonCol, IonContent, IonGrid, IonHeader, IonInput, IonPage, IonRow, IonText, IonTitle, IonToolbar } from '@ionic/react';
import React, { useEffect, useState } from 'react';
import {
  IonAccordion,
  IonAccordionGroup,
  IonItem,
  IonLabel
} from '@ionic/react';
import { Directory } from "@capacitor/filesystem";
import write_blob from "capacitor-blob-writer";
import { format } from 'date-fns';
import "../css/calendar.css"
import { Browser } from '@capacitor/browser';
import exerciseByDate from '../api/exerciseByDate';
import { Preferences } from '@capacitor/preferences';
import Loader from '../components/Loader';
import getPrescriptionByMonth from '../api/getPrescriptionByMonth';
import Toast from '../components/Toast';


const Calendar: React.FC = (props) => {
  let todayDate = format(new Date(), "yyyy-MM-dd")
  const [dateOfEvaluation, setdateOfEvaluation] = useState(todayDate)
  const [exerciseTrackArr, setexerciseTrackArr] = useState([])
  const [doctorId, setdoctorId] = useState(0);
  const [isLoadingResult, setisLoadingResult] = useState(true)
  const [showToast, setshowToast] = useState(false)
  const [toastMessage, settoastMessage] = useState("")
  const [toastColor, settoastColor] = useState("success")
  const [doctorData, setdoctorData] = useState({
    "doctor_Id": 0,
    "doctor_name": "",
    "doctor_username": "",
    "doctor_email": "",
    "doctor_mobile": "",
    "doctor_password": "",
    "doctor_degree": "",
    "specialisation": "",
    "doctor_logo": "",
    "doctor_sign": "",
    "doctor_address": "",
    "registration_number": "",
    "subscription_type": "",
    "subscription_start_date": "",
    "subscription_end_date": "",
    "consultation_charge": "",
    "treatment1_charge": "",
    "treatment2_charge": 0,
    "treatment3_charge": 0,
  })

  useEffect(() => {
    async function fetchData() {
      const { value } = await Preferences.get({ key: 'userInfo' });

      let doctorData = JSON.parse(value);
      console.log("doctorData", doctorData);

      let request = {
        doctor_id: doctorData.doctor_Id,
        search_date: todayDate
      }
      setdoctorId(doctorData.doctor_Id)
      setdoctorData(doctorData)
      callApi(request)
    }

    fetchData()
  }, [])

  async function setToastData(message, color) {
    settoastColor(color);
    settoastMessage(message);
    setshowToast(true);
    setTimeout(() => { setshowToast(false) }, 2000);
  }

  const openPrescriptionLink = async (URL: string) => {
    await Browser.open({ url: URL, windowName: '_self' })
  }

  const callApi = async (request) => {
    setisLoadingResult(true)
    const response = await exerciseByDate(request)
    if (response.status) {
      setexerciseTrackArr(response.data)
    }
    setisLoadingResult(false)
  }

  const callReportApi = async () => {
    const response = await getPrescriptionByMonth({ date_of_report: dateOfEvaluation, doctor_id: doctorId })
    // console.log("response", response)
    let fileName = `${doctorData.doctor_name} ${format(new Date(dateOfEvaluation), 'MMMM')} Report.xlsx`
    // const url = window.URL.createObjectURL(new Blob([response]));
    // const link = document.createElement('a');
    // link.href = url;
    // link.setAttribute('download', `${fileName}.xlsx`); //or any other extension
    // document.body.appendChild(link);
    // link.click();


    // Firstly, get a reference to a Blob. This could be a file downloaded from the
    // internet, or some binary data generated by your app.

    let my_excel_blob = new Blob([response]);

    // Secondly, write the Blob to disk. The 'write_blob' function takes an options
    // object and returns a Promise, which resolves once the file has been
    // successfully written.

    write_blob({

      // The 'path' option should be a string describing where to write the file. It
      // may be specified as an absolute URL (beginning with "file://") or a relative
      // path, in which case it is assumed to be relative to the 'directory' option.

      path: fileName,

      // The 'directory' option is used to resolve 'path' to a location on the disk.
      // It is ignored if the 'path' option begins with "file://".

      directory: Directory.Documents,


      // The 'blob' option must be a Blob, which will be written to the file. The file
      // on disk is overwritten, not appended to.

      blob: my_excel_blob,

      // Fast mode vastly improves read and write speeds on the web platform. For
      // files written with 'fast_mode' set to true, Filesystem.readFile will produce
      // a Blob rather than a Base64-encoded string. The 'fast_mode' option is
      // ignored on iOS and Android. For backwards compatibility, it defaults to
      // false.

      fast_mode: true,

      // If the 'recursive' option is 'true', intermediate directories will be created
      // as required. It defaults to 'false' if not specified.

      recursive: true,

      // If 'write_blob' falls back to its alternative strategy on failure, the
      // 'on_fallback' function will be called with the underlying error. This can be
      // useful to diagnose slow writes. It is optional.

      // See the "Fallback mode" section below for a detailed explanation.

      on_fallback(error) {
        
        console.error("error while writing excel",error );
      }
    }).then(function (res) {
      setToastData(res, "success")
      console.log("excel written.", res);

    });

  }

  return (
    <IonPage>
      <IonHeader>
        <div className="logoImgContainer">
          <h5>Patient Calendar</h5>
          <span></span>
          <IonButton size='small' color="success" onClick={() => callReportApi()} className="downloadReport">Download Report</IonButton>
        </div>
      </IonHeader>
      <IonContent fullscreen>

        <Toast
          showToast={showToast}
          closeToast={(e) => { setshowToast(e) }}
          message={toastMessage}
          color={toastColor}
        />

        <IonInput
          className="exTrackDate"
          type="date"
          value={dateOfEvaluation}
          onIonChange={(e) => {
            setdateOfEvaluation(e.detail.value);
            callApi({ doctor_id: doctorId, search_date: e.detail.value })
          }}
        />
        {isLoadingResult ?
          <Loader />
          :
          <IonAccordionGroup className="exTrackAccorContainer">
            {exerciseTrackArr.map((exerciseObj, index) => {
              return (
                <IonAccordion value={index.toString()} key={index} className="exTrackObjContainer">
                  <IonItem slot="header" color={exerciseObj.allexercisecompleted == 1 ? "success" : exerciseObj.allexercisecompleted == 2 ? "warning" : "danger"}>
                    <IonLabel><b>{exerciseObj.patient_name}</b></IonLabel>
                  </IonItem>
                  <IonGrid slot="content">
                    {exerciseObj.prescription_link ?
                      <>
                        <IonText><h5>Prescription Link</h5> </IonText>
                        <IonText><a onClick={async () => { openPrescriptionLink(exerciseObj.prescription_link) }}>{exerciseObj.prescription_link}</a></IonText>
                      </>
                      : null
                    }
                    {exerciseObj.exercise_arr.map((exercise, key) => {
                      return (
                        <IonRow className="exerciseRowContainer" style={{ color: exercise.isCompleted ? "#22af22" : "#f12525e0" }} key={key}>
                          <IonCol size='8'>{exercise.exercise_name}</IonCol>
                          <IonCol size='4'>{exercise.isCompleted ? "Completed" : "InComplete"}</IonCol>
                        </IonRow>

                      )
                    })}
                    {exerciseObj.vas_type ?
                      <>
                      <div className='vasdiv'>
                        <IonRow className="exerciseRowContainer">
                          <IonCol size='6'><h5>Vas Type: <span>{exerciseObj.vas_type}</span></h5></IonCol>
                          <IonCol size='6'><h5>Vas Scale: <span>{exerciseObj.vas_scale}</span></h5></IonCol>
                        </IonRow>
                        <IonRow className="exerciseRowContainer">
                          <IonCol size='12'><h5>Vas Remark:</h5></IonCol>
                          <IonCol size='12'><p>{exerciseObj.vas_remark}</p></IonCol>
                        </IonRow>
                      </div>
                      </>
                      : null
                    }
                  </IonGrid>
                </IonAccordion>
              )
            })
            }
          </IonAccordionGroup>
        }
      </IonContent>
    </IonPage >
  );
};

export default Calendar;
